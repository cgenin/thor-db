/**
 * Autogenerated by Avro
 *
 * DO NOT EDIT DIRECTLY
 */
package fr.genin.christophe.thor.core.serialization.avro;

import org.apache.avro.generic.GenericArray;
import org.apache.avro.specific.SpecificData;
import org.apache.avro.util.Utf8;
import org.apache.avro.message.BinaryMessageEncoder;
import org.apache.avro.message.BinaryMessageDecoder;
import org.apache.avro.message.SchemaStore;

@org.apache.avro.specific.AvroGenerated
public class AvroDynamicViewFilter extends org.apache.avro.specific.SpecificRecordBase implements org.apache.avro.specific.SpecificRecord {
  private static final long serialVersionUID = 3779929445650668598L;
  public static final org.apache.avro.Schema SCHEMA$ = new org.apache.avro.Schema.Parser().parse("{\"type\":\"record\",\"name\":\"AvroDynamicViewFilter\",\"namespace\":\"fr.genin.christophe.thor.core.serialization.avro\",\"fields\":[{\"name\":\"type\",\"type\":\"string\"},{\"name\":\"val\",\"type\":\"string\"},{\"name\":\"uid\",\"type\":\"string\"}]}");
  public static org.apache.avro.Schema getClassSchema() { return SCHEMA$; }

  private static SpecificData MODEL$ = new SpecificData();

  private static final BinaryMessageEncoder<AvroDynamicViewFilter> ENCODER =
      new BinaryMessageEncoder<AvroDynamicViewFilter>(MODEL$, SCHEMA$);

  private static final BinaryMessageDecoder<AvroDynamicViewFilter> DECODER =
      new BinaryMessageDecoder<AvroDynamicViewFilter>(MODEL$, SCHEMA$);

  /**
   * Return the BinaryMessageEncoder instance used by this class.
   * @return the message encoder used by this class
   */
  public static BinaryMessageEncoder<AvroDynamicViewFilter> getEncoder() {
    return ENCODER;
  }

  /**
   * Return the BinaryMessageDecoder instance used by this class.
   * @return the message decoder used by this class
   */
  public static BinaryMessageDecoder<AvroDynamicViewFilter> getDecoder() {
    return DECODER;
  }

  /**
   * Create a new BinaryMessageDecoder instance for this class that uses the specified {@link SchemaStore}.
   * @param resolver a {@link SchemaStore} used to find schemas by fingerprint
   * @return a BinaryMessageDecoder instance for this class backed by the given SchemaStore
   */
  public static BinaryMessageDecoder<AvroDynamicViewFilter> createDecoder(SchemaStore resolver) {
    return new BinaryMessageDecoder<AvroDynamicViewFilter>(MODEL$, SCHEMA$, resolver);
  }

  /**
   * Serializes this AvroDynamicViewFilter to a ByteBuffer.
   * @return a buffer holding the serialized data for this instance
   * @throws java.io.IOException if this instance could not be serialized
   */
  public java.nio.ByteBuffer toByteBuffer() throws java.io.IOException {
    return ENCODER.encode(this);
  }

  /**
   * Deserializes a AvroDynamicViewFilter from a ByteBuffer.
   * @param b a byte buffer holding serialized data for an instance of this class
   * @return a AvroDynamicViewFilter instance decoded from the given buffer
   * @throws java.io.IOException if the given bytes could not be deserialized into an instance of this class
   */
  public static AvroDynamicViewFilter fromByteBuffer(
      java.nio.ByteBuffer b) throws java.io.IOException {
    return DECODER.decode(b);
  }

   private java.lang.CharSequence type;
   private java.lang.CharSequence val;
   private java.lang.CharSequence uid;

  /**
   * Default constructor.  Note that this does not initialize fields
   * to their default values from the schema.  If that is desired then
   * one should use <code>newBuilder()</code>.
   */
  public AvroDynamicViewFilter() {}

  /**
   * All-args constructor.
   * @param type The new value for type
   * @param val The new value for val
   * @param uid The new value for uid
   */
  public AvroDynamicViewFilter(java.lang.CharSequence type, java.lang.CharSequence val, java.lang.CharSequence uid) {
    this.type = type;
    this.val = val;
    this.uid = uid;
  }

  public org.apache.avro.specific.SpecificData getSpecificData() { return MODEL$; }
  public org.apache.avro.Schema getSchema() { return SCHEMA$; }
  // Used by DatumWriter.  Applications should not call.
  public java.lang.Object get(int field$) {
    switch (field$) {
    case 0: return type;
    case 1: return val;
    case 2: return uid;
    default: throw new IndexOutOfBoundsException("Invalid index: " + field$);
    }
  }

  // Used by DatumReader.  Applications should not call.
  @SuppressWarnings(value="unchecked")
  public void put(int field$, java.lang.Object value$) {
    switch (field$) {
    case 0: type = (java.lang.CharSequence)value$; break;
    case 1: val = (java.lang.CharSequence)value$; break;
    case 2: uid = (java.lang.CharSequence)value$; break;
    default: throw new IndexOutOfBoundsException("Invalid index: " + field$);
    }
  }

  /**
   * Gets the value of the 'type' field.
   * @return The value of the 'type' field.
   */
  public java.lang.CharSequence getType() {
    return type;
  }


  /**
   * Sets the value of the 'type' field.
   * @param value the value to set.
   */
  public void setType(java.lang.CharSequence value) {
    this.type = value;
  }

  /**
   * Gets the value of the 'val' field.
   * @return The value of the 'val' field.
   */
  public java.lang.CharSequence getVal() {
    return val;
  }


  /**
   * Sets the value of the 'val' field.
   * @param value the value to set.
   */
  public void setVal(java.lang.CharSequence value) {
    this.val = value;
  }

  /**
   * Gets the value of the 'uid' field.
   * @return The value of the 'uid' field.
   */
  public java.lang.CharSequence getUid() {
    return uid;
  }


  /**
   * Sets the value of the 'uid' field.
   * @param value the value to set.
   */
  public void setUid(java.lang.CharSequence value) {
    this.uid = value;
  }

  /**
   * Creates a new AvroDynamicViewFilter RecordBuilder.
   * @return A new AvroDynamicViewFilter RecordBuilder
   */
  public static fr.genin.christophe.thor.core.serialization.avro.AvroDynamicViewFilter.Builder newBuilder() {
    return new fr.genin.christophe.thor.core.serialization.avro.AvroDynamicViewFilter.Builder();
  }

  /**
   * Creates a new AvroDynamicViewFilter RecordBuilder by copying an existing Builder.
   * @param other The existing builder to copy.
   * @return A new AvroDynamicViewFilter RecordBuilder
   */
  public static fr.genin.christophe.thor.core.serialization.avro.AvroDynamicViewFilter.Builder newBuilder(fr.genin.christophe.thor.core.serialization.avro.AvroDynamicViewFilter.Builder other) {
    if (other == null) {
      return new fr.genin.christophe.thor.core.serialization.avro.AvroDynamicViewFilter.Builder();
    } else {
      return new fr.genin.christophe.thor.core.serialization.avro.AvroDynamicViewFilter.Builder(other);
    }
  }

  /**
   * Creates a new AvroDynamicViewFilter RecordBuilder by copying an existing AvroDynamicViewFilter instance.
   * @param other The existing instance to copy.
   * @return A new AvroDynamicViewFilter RecordBuilder
   */
  public static fr.genin.christophe.thor.core.serialization.avro.AvroDynamicViewFilter.Builder newBuilder(fr.genin.christophe.thor.core.serialization.avro.AvroDynamicViewFilter other) {
    if (other == null) {
      return new fr.genin.christophe.thor.core.serialization.avro.AvroDynamicViewFilter.Builder();
    } else {
      return new fr.genin.christophe.thor.core.serialization.avro.AvroDynamicViewFilter.Builder(other);
    }
  }

  /**
   * RecordBuilder for AvroDynamicViewFilter instances.
   */
  @org.apache.avro.specific.AvroGenerated
  public static class Builder extends org.apache.avro.specific.SpecificRecordBuilderBase<AvroDynamicViewFilter>
    implements org.apache.avro.data.RecordBuilder<AvroDynamicViewFilter> {

    private java.lang.CharSequence type;
    private java.lang.CharSequence val;
    private java.lang.CharSequence uid;

    /** Creates a new Builder */
    private Builder() {
      super(SCHEMA$);
    }

    /**
     * Creates a Builder by copying an existing Builder.
     * @param other The existing Builder to copy.
     */
    private Builder(fr.genin.christophe.thor.core.serialization.avro.AvroDynamicViewFilter.Builder other) {
      super(other);
      if (isValidValue(fields()[0], other.type)) {
        this.type = data().deepCopy(fields()[0].schema(), other.type);
        fieldSetFlags()[0] = other.fieldSetFlags()[0];
      }
      if (isValidValue(fields()[1], other.val)) {
        this.val = data().deepCopy(fields()[1].schema(), other.val);
        fieldSetFlags()[1] = other.fieldSetFlags()[1];
      }
      if (isValidValue(fields()[2], other.uid)) {
        this.uid = data().deepCopy(fields()[2].schema(), other.uid);
        fieldSetFlags()[2] = other.fieldSetFlags()[2];
      }
    }

    /**
     * Creates a Builder by copying an existing AvroDynamicViewFilter instance
     * @param other The existing instance to copy.
     */
    private Builder(fr.genin.christophe.thor.core.serialization.avro.AvroDynamicViewFilter other) {
      super(SCHEMA$);
      if (isValidValue(fields()[0], other.type)) {
        this.type = data().deepCopy(fields()[0].schema(), other.type);
        fieldSetFlags()[0] = true;
      }
      if (isValidValue(fields()[1], other.val)) {
        this.val = data().deepCopy(fields()[1].schema(), other.val);
        fieldSetFlags()[1] = true;
      }
      if (isValidValue(fields()[2], other.uid)) {
        this.uid = data().deepCopy(fields()[2].schema(), other.uid);
        fieldSetFlags()[2] = true;
      }
    }

    /**
      * Gets the value of the 'type' field.
      * @return The value.
      */
    public java.lang.CharSequence getType() {
      return type;
    }


    /**
      * Sets the value of the 'type' field.
      * @param value The value of 'type'.
      * @return This builder.
      */
    public fr.genin.christophe.thor.core.serialization.avro.AvroDynamicViewFilter.Builder setType(java.lang.CharSequence value) {
      validate(fields()[0], value);
      this.type = value;
      fieldSetFlags()[0] = true;
      return this;
    }

    /**
      * Checks whether the 'type' field has been set.
      * @return True if the 'type' field has been set, false otherwise.
      */
    public boolean hasType() {
      return fieldSetFlags()[0];
    }


    /**
      * Clears the value of the 'type' field.
      * @return This builder.
      */
    public fr.genin.christophe.thor.core.serialization.avro.AvroDynamicViewFilter.Builder clearType() {
      type = null;
      fieldSetFlags()[0] = false;
      return this;
    }

    /**
      * Gets the value of the 'val' field.
      * @return The value.
      */
    public java.lang.CharSequence getVal() {
      return val;
    }


    /**
      * Sets the value of the 'val' field.
      * @param value The value of 'val'.
      * @return This builder.
      */
    public fr.genin.christophe.thor.core.serialization.avro.AvroDynamicViewFilter.Builder setVal(java.lang.CharSequence value) {
      validate(fields()[1], value);
      this.val = value;
      fieldSetFlags()[1] = true;
      return this;
    }

    /**
      * Checks whether the 'val' field has been set.
      * @return True if the 'val' field has been set, false otherwise.
      */
    public boolean hasVal() {
      return fieldSetFlags()[1];
    }


    /**
      * Clears the value of the 'val' field.
      * @return This builder.
      */
    public fr.genin.christophe.thor.core.serialization.avro.AvroDynamicViewFilter.Builder clearVal() {
      val = null;
      fieldSetFlags()[1] = false;
      return this;
    }

    /**
      * Gets the value of the 'uid' field.
      * @return The value.
      */
    public java.lang.CharSequence getUid() {
      return uid;
    }


    /**
      * Sets the value of the 'uid' field.
      * @param value The value of 'uid'.
      * @return This builder.
      */
    public fr.genin.christophe.thor.core.serialization.avro.AvroDynamicViewFilter.Builder setUid(java.lang.CharSequence value) {
      validate(fields()[2], value);
      this.uid = value;
      fieldSetFlags()[2] = true;
      return this;
    }

    /**
      * Checks whether the 'uid' field has been set.
      * @return True if the 'uid' field has been set, false otherwise.
      */
    public boolean hasUid() {
      return fieldSetFlags()[2];
    }


    /**
      * Clears the value of the 'uid' field.
      * @return This builder.
      */
    public fr.genin.christophe.thor.core.serialization.avro.AvroDynamicViewFilter.Builder clearUid() {
      uid = null;
      fieldSetFlags()[2] = false;
      return this;
    }

    @Override
    @SuppressWarnings("unchecked")
    public AvroDynamicViewFilter build() {
      try {
        AvroDynamicViewFilter record = new AvroDynamicViewFilter();
        record.type = fieldSetFlags()[0] ? this.type : (java.lang.CharSequence) defaultValue(fields()[0]);
        record.val = fieldSetFlags()[1] ? this.val : (java.lang.CharSequence) defaultValue(fields()[1]);
        record.uid = fieldSetFlags()[2] ? this.uid : (java.lang.CharSequence) defaultValue(fields()[2]);
        return record;
      } catch (org.apache.avro.AvroMissingFieldException e) {
        throw e;
      } catch (java.lang.Exception e) {
        throw new org.apache.avro.AvroRuntimeException(e);
      }
    }
  }

  @SuppressWarnings("unchecked")
  private static final org.apache.avro.io.DatumWriter<AvroDynamicViewFilter>
    WRITER$ = (org.apache.avro.io.DatumWriter<AvroDynamicViewFilter>)MODEL$.createDatumWriter(SCHEMA$);

  @Override public void writeExternal(java.io.ObjectOutput out)
    throws java.io.IOException {
    WRITER$.write(this, SpecificData.getEncoder(out));
  }

  @SuppressWarnings("unchecked")
  private static final org.apache.avro.io.DatumReader<AvroDynamicViewFilter>
    READER$ = (org.apache.avro.io.DatumReader<AvroDynamicViewFilter>)MODEL$.createDatumReader(SCHEMA$);

  @Override public void readExternal(java.io.ObjectInput in)
    throws java.io.IOException {
    READER$.read(this, SpecificData.getDecoder(in));
  }

  @Override protected boolean hasCustomCoders() { return true; }

  @Override public void customEncode(org.apache.avro.io.Encoder out)
    throws java.io.IOException
  {
    out.writeString(this.type);

    out.writeString(this.val);

    out.writeString(this.uid);

  }

  @Override public void customDecode(org.apache.avro.io.ResolvingDecoder in)
    throws java.io.IOException
  {
    org.apache.avro.Schema.Field[] fieldOrder = in.readFieldOrderIfDiff();
    if (fieldOrder == null) {
      this.type = in.readString(this.type instanceof Utf8 ? (Utf8)this.type : null);

      this.val = in.readString(this.val instanceof Utf8 ? (Utf8)this.val : null);

      this.uid = in.readString(this.uid instanceof Utf8 ? (Utf8)this.uid : null);

    } else {
      for (int i = 0; i < 3; i++) {
        switch (fieldOrder[i].pos()) {
        case 0:
          this.type = in.readString(this.type instanceof Utf8 ? (Utf8)this.type : null);
          break;

        case 1:
          this.val = in.readString(this.val instanceof Utf8 ? (Utf8)this.val : null);
          break;

        case 2:
          this.uid = in.readString(this.uid instanceof Utf8 ? (Utf8)this.uid : null);
          break;

        default:
          throw new java.io.IOException("Corrupt ResolvingDecoder.");
        }
      }
    }
  }
}










