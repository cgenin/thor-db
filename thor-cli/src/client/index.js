/**
 * Database API
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 *
 */

import ApiClient from './ApiClient';
import CollectionDto from './model/CollectionDto';
import CollectionOptions from './model/CollectionOptions';
import DynamicViewDto from './model/DynamicViewDto';
import DynamicViewFilter from './model/DynamicViewFilter';
import DynamicViewOption from './model/DynamicViewOption';
import Health from './model/Health';
import JsonObject from './model/JsonObject';
import ListCollectionDto from './model/ListCollectionDto';
import SimpleCriteriaDto from './model/SimpleCriteriaDto';
import ThorDto from './model/ThorDto';
import ThorOptions from './model/ThorOptions';
import TransformDto from './model/TransformDto';
import Ttl from './model/Ttl';
import CollectionsApi from './api/CollectionsApi';
import DatabasesApi from './api/DatabasesApi';
import DefaultApi from './api/DefaultApi';
import DynamicViewsApi from './api/DynamicViewsApi';
import IndexApi from './api/IndexApi';
import SearchApi from './api/SearchApi';
import StatisticsApi from './api/StatisticsApi';
import TransformsApi from './api/TransformsApi';

/**
* Object.<br>
* The <code>index</code> module provides access to constructors for all the classes which comprise the public API.
* <p>
* An AMD (recommended!) or CommonJS application will generally do something equivalent to the following:
* <pre>
* var DatabaseApi = require('index'); // See note below*.
* var xxxSvc = new DatabaseApi.XxxApi(); // Allocate the API class we're going to use.
* var yyyModel = new DatabaseApi.Yyy(); // Construct a model instance.
* yyyModel.someProperty = 'someValue';
* ...
* var zzz = xxxSvc.doSomething(yyyModel); // Invoke the service.
* ...
* </pre>
* <em>*NOTE: For a top-level AMD script, use require(['index'], function(){...})
* and put the application logic within the callback function.</em>
* </p>
* <p>
* A non-AMD browser application (discouraged) might do something like this:
* <pre>
* var xxxSvc = new DatabaseApi.XxxApi(); // Allocate the API class we're going to use.
* var yyy = new DatabaseApi.Yyy(); // Construct a model instance.
* yyyModel.someProperty = 'someValue';
* ...
* var zzz = xxxSvc.doSomething(yyyModel); // Invoke the service.
* ...
* </pre>
* </p>
* @module index
* @version 1.0.0
*/
export {
    /**
     * The ApiClient constructor.
     * @property {module:ApiClient}
     */
    ApiClient,

    /**
     * The CollectionDto model constructor.
     * @property {module:model/CollectionDto}
     */
    CollectionDto,

    /**
     * The CollectionOptions model constructor.
     * @property {module:model/CollectionOptions}
     */
    CollectionOptions,

    /**
     * The DynamicViewDto model constructor.
     * @property {module:model/DynamicViewDto}
     */
    DynamicViewDto,

    /**
     * The DynamicViewFilter model constructor.
     * @property {module:model/DynamicViewFilter}
     */
    DynamicViewFilter,

    /**
     * The DynamicViewOption model constructor.
     * @property {module:model/DynamicViewOption}
     */
    DynamicViewOption,

    /**
     * The Health model constructor.
     * @property {module:model/Health}
     */
    Health,

    /**
     * The JsonObject model constructor.
     * @property {module:model/JsonObject}
     */
    JsonObject,

    /**
     * The ListCollectionDto model constructor.
     * @property {module:model/ListCollectionDto}
     */
    ListCollectionDto,

    /**
     * The SimpleCriteriaDto model constructor.
     * @property {module:model/SimpleCriteriaDto}
     */
    SimpleCriteriaDto,

    /**
     * The ThorDto model constructor.
     * @property {module:model/ThorDto}
     */
    ThorDto,

    /**
     * The ThorOptions model constructor.
     * @property {module:model/ThorOptions}
     */
    ThorOptions,

    /**
     * The TransformDto model constructor.
     * @property {module:model/TransformDto}
     */
    TransformDto,

    /**
     * The Ttl model constructor.
     * @property {module:model/Ttl}
     */
    Ttl,

    /**
    * The CollectionsApi service constructor.
    * @property {module:api/CollectionsApi}
    */
    CollectionsApi,

    /**
    * The DatabasesApi service constructor.
    * @property {module:api/DatabasesApi}
    */
    DatabasesApi,

    /**
    * The DefaultApi service constructor.
    * @property {module:api/DefaultApi}
    */
    DefaultApi,

    /**
    * The DynamicViewsApi service constructor.
    * @property {module:api/DynamicViewsApi}
    */
    DynamicViewsApi,

    /**
    * The IndexApi service constructor.
    * @property {module:api/IndexApi}
    */
    IndexApi,

    /**
    * The SearchApi service constructor.
    * @property {module:api/SearchApi}
    */
    SearchApi,

    /**
    * The StatisticsApi service constructor.
    * @property {module:api/StatisticsApi}
    */
    StatisticsApi,

    /**
    * The TransformsApi service constructor.
    * @property {module:api/TransformsApi}
    */
    TransformsApi
};
