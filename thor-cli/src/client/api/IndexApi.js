/**
 * Database API
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 *
 */

import ApiClient from "../ApiClient";

/**
* Index service.
* @module api/IndexApi
* @version 1.0.0
*/
export default class IndexApi {

    /**
    * Constructs a new IndexApi. 
    * @alias module:api/IndexApi
    * @class
    * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
    * default to {@link module:ApiClient#instance} if unspecified.
    */
    constructor(apiClient) {
        this.apiClient = apiClient || ApiClient.instance;
    }

    /**
     * Callback function to receive the result of the apiDatabasesdatabaseNameCollectionscollectionNameIdIndexPost operation.
     * @callback module:api/IndexApi~apiDatabasesdatabaseNameCollectionscollectionNameIdIndexPostCallback
     * @param {String} error Error message, if any.
     * @param {Array.<'Number'>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get id index
     * Get id index
     * @param {Object} opts Optional parameters
     * @param {module:api/IndexApi~apiDatabasesdatabaseNameCollectionscollectionNameIdIndexPostCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<'Number'>}
     */
    apiDatabasesdatabaseNameCollectionscollectionNameIdIndexPost(opts, callback) {
      opts = opts || {};
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
        'collectionName': opts['collectionName'],
        'databaseName': opts['databaseName']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = ['Number'];

      return ApiClient.instance.callApi(
        '/api/databases/:databaseName/collections/:collectionName/id-index', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }
    /**
     * Callback function to receive the result of the apiDatabasesdatabaseNameCollectionscollectionNameIdIndexPut operation.
     * @callback module:api/IndexApi~apiDatabasesdatabaseNameCollectionscollectionNameIdIndexPutCallback
     * @param {String} error Error message, if any.
     * @param {Array.<'Number'>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get id index
     * Get id index
     * @param {Object} opts Optional parameters
     * @param {module:api/IndexApi~apiDatabasesdatabaseNameCollectionscollectionNameIdIndexPutCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<'Number'>}
     */
    apiDatabasesdatabaseNameCollectionscollectionNameIdIndexPut(opts, callback) {
      opts = opts || {};
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
        'collectionName': opts['collectionName'],
        'databaseName': opts['databaseName']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = ['Number'];

      return ApiClient.instance.callApi(
        '/api/databases/:databaseName/collections/:collectionName/id-index', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }
    /**
     * Callback function to receive the result of the apiDatabasesdatabaseNameCollectionscollectionNameIndexPropertyPost operation.
     * @callback module:api/IndexApi~apiDatabasesdatabaseNameCollectionscollectionNameIndexPropertyPostCallback
     * @param {String} error Error message, if any.
     * @param {'Boolean'} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Add or update an index
     * Add or update an index for an specific property
     * @param {Object} opts Optional parameters
     * @param {module:api/IndexApi~apiDatabasesdatabaseNameCollectionscollectionNameIndexPropertyPostCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link 'Boolean'}
     */
    apiDatabasesdatabaseNameCollectionscollectionNameIndexPropertyPost(property, opts, callback) {
      opts = opts || {};
      let postBody = null;

      let pathParams = {
        'property': property
      };
      let queryParams = {
        'collectionName': opts['collectionName'],
        'databaseName': opts['databaseName']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = 'Boolean';

      return ApiClient.instance.callApi(
        '/api/databases/:databaseName/collections/:collectionName/index/{property}', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }
    /**
     * Callback function to receive the result of the apiDatabasesdatabaseNameCollectionscollectionNameIndexPropertyPut operation.
     * @callback module:api/IndexApi~apiDatabasesdatabaseNameCollectionscollectionNameIndexPropertyPutCallback
     * @param {String} error Error message, if any.
     * @param {'Boolean'} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Add or update an index
     * Add or update an index for an specific property
     * @param {Object} opts Optional parameters
     * @param {module:api/IndexApi~apiDatabasesdatabaseNameCollectionscollectionNameIndexPropertyPutCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link 'Boolean'}
     */
    apiDatabasesdatabaseNameCollectionscollectionNameIndexPropertyPut(property, opts, callback) {
      opts = opts || {};
      let postBody = null;

      let pathParams = {
        'property': property
      };
      let queryParams = {
        'collectionName': opts['collectionName'],
        'databaseName': opts['databaseName']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = 'Boolean';

      return ApiClient.instance.callApi(
        '/api/databases/:databaseName/collections/:collectionName/index/{property}', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }
    /**
     * Callback function to receive the result of the apiDatabasesdatabaseNameCollectionscollectionNameUniqueIndexPropertyPost operation.
     * @callback module:api/IndexApi~apiDatabasesdatabaseNameCollectionscollectionNameUniqueIndexPropertyPostCallback
     * @param {String} error Error message, if any.
     * @param {'Boolean'} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Add or update an unique index
     * Add or update an unique index for an specific property
     * @param {Object} opts Optional parameters
     * @param {module:api/IndexApi~apiDatabasesdatabaseNameCollectionscollectionNameUniqueIndexPropertyPostCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link 'Boolean'}
     */
    apiDatabasesdatabaseNameCollectionscollectionNameUniqueIndexPropertyPost(property, opts, callback) {
      opts = opts || {};
      let postBody = null;

      let pathParams = {
        'property': property
      };
      let queryParams = {
        'collectionName': opts['collectionName'],
        'databaseName': opts['databaseName']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = 'Boolean';

      return ApiClient.instance.callApi(
        '/api/databases/:databaseName/collections/:collectionName/unique-index/{property}', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }
    /**
     * Callback function to receive the result of the apiDatabasesdatabaseNameCollectionscollectionNameUniqueIndexPropertyPut operation.
     * @callback module:api/IndexApi~apiDatabasesdatabaseNameCollectionscollectionNameUniqueIndexPropertyPutCallback
     * @param {String} error Error message, if any.
     * @param {'Boolean'} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Add or update an unique index
     * Add or update an unique index for an specific property
     * @param {Object} opts Optional parameters
     * @param {module:api/IndexApi~apiDatabasesdatabaseNameCollectionscollectionNameUniqueIndexPropertyPutCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link 'Boolean'}
     */
    apiDatabasesdatabaseNameCollectionscollectionNameUniqueIndexPropertyPut(property, opts, callback) {
      opts = opts || {};
      let postBody = null;

      let pathParams = {
        'property': property
      };
      let queryParams = {
        'collectionName': opts['collectionName'],
        'databaseName': opts['databaseName']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = 'Boolean';

      return ApiClient.instance.callApi(
        '/api/databases/:databaseName/collections/:collectionName/unique-index/{property}', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

}
