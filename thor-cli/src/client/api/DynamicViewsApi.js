/**
 * Database API
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 *
 */

import ApiClient from "../ApiClient";
import DynamicViewDto from '../model/DynamicViewDto';
import DynamicViewFilter from '../model/DynamicViewFilter';
import JsonObject from '../model/JsonObject';
import SimpleCriteriaDto from '../model/SimpleCriteriaDto';

/**
* DynamicViews service.
* @module api/DynamicViewsApi
* @version 1.0.0
*/
export default class DynamicViewsApi {

    /**
    * Constructs a new DynamicViewsApi. 
    * @alias module:api/DynamicViewsApi
    * @class
    * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
    * default to {@link module:ApiClient#instance} if unspecified.
    */
    constructor(apiClient) {
        this.apiClient = apiClient || ApiClient.instance;
    }

    /**
     * Callback function to receive the result of the apiDatabasesdatabaseNameCollectionscollectionNameDynamicViewsDynamicViewNameCountGet operation.
     * @callback module:api/DynamicViewsApi~apiDatabasesdatabaseNameCollectionscollectionNameDynamicViewsDynamicViewNameCountGetCallback
     * @param {String} error Error message, if any.
     * @param {'Number'} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Count
     * Count number of datas from an Dynamic view from an collection
     * @param {Object} opts Optional parameters
     * @param {module:api/DynamicViewsApi~apiDatabasesdatabaseNameCollectionscollectionNameDynamicViewsDynamicViewNameCountGetCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link 'Number'}
     */
    apiDatabasesdatabaseNameCollectionscollectionNameDynamicViewsDynamicViewNameCountGet(dynamicViewName, opts, callback) {
      opts = opts || {};
      let postBody = null;

      let pathParams = {
        'dynamicViewName': dynamicViewName
      };
      let queryParams = {
        'collectionName': opts['collectionName'],
        'databaseName': opts['databaseName']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = 'Number';

      return ApiClient.instance.callApi(
        '/api/databases/:databaseName/collections/:collectionName/dynamicViews/{dynamicViewName}/count', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }
    /**
     * Callback function to receive the result of the apiDatabasesdatabaseNameCollectionscollectionNameDynamicViewsDynamicViewNameDataGet operation.
     * @callback module:api/DynamicViewsApi~apiDatabasesdatabaseNameCollectionscollectionNameDynamicViewsDynamicViewNameDataGetCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/JsonObject>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get datas
     * Get datas from an Dynamic view from an collection
     * @param {Object} opts Optional parameters
     * @param {module:api/DynamicViewsApi~apiDatabasesdatabaseNameCollectionscollectionNameDynamicViewsDynamicViewNameDataGetCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/JsonObject>}
     */
    apiDatabasesdatabaseNameCollectionscollectionNameDynamicViewsDynamicViewNameDataGet(dynamicViewName, opts, callback) {
      opts = opts || {};
      let postBody = null;

      let pathParams = {
        'dynamicViewName': dynamicViewName
      };
      let queryParams = {
        'collectionName': opts['collectionName'],
        'databaseName': opts['databaseName']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = [JsonObject];

      return ApiClient.instance.callApi(
        '/api/databases/:databaseName/collections/:collectionName/dynamicViews/{dynamicViewName}/data', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }
    /**
     * Callback function to receive the result of the apiDatabasesdatabaseNameCollectionscollectionNameDynamicViewsDynamicViewNameDelete operation.
     * @callback module:api/DynamicViewsApi~apiDatabasesdatabaseNameCollectionscollectionNameDynamicViewsDynamicViewNameDeleteCallback
     * @param {String} error Error message, if any.
     * @param {module:model/JsonObject} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Delete
     * Remove an Dynamic view from an collection
     * @param {Object} opts Optional parameters
     * @param {module:api/DynamicViewsApi~apiDatabasesdatabaseNameCollectionscollectionNameDynamicViewsDynamicViewNameDeleteCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/JsonObject}
     */
    apiDatabasesdatabaseNameCollectionscollectionNameDynamicViewsDynamicViewNameDelete(dynamicViewName, opts, callback) {
      opts = opts || {};
      let postBody = null;

      let pathParams = {
        'dynamicViewName': dynamicViewName
      };
      let queryParams = {
        'collectionName': opts['collectionName'],
        'databaseName': opts['databaseName']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = JsonObject;

      return ApiClient.instance.callApi(
        '/api/databases/:databaseName/collections/:collectionName/dynamicViews/{dynamicViewName}', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }
    /**
     * Callback function to receive the result of the apiDatabasesdatabaseNameCollectionscollectionNameDynamicViewsDynamicViewNameFindDelete operation.
     * @callback module:api/DynamicViewsApi~apiDatabasesdatabaseNameCollectionscollectionNameDynamicViewsDynamicViewNameFindDeleteCallback
     * @param {String} error Error message, if any.
     * @param {module:model/DynamicViewDto} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Remove all filters
     * Remove all filters from an Dynamic view from an collection
     * @param {Object} opts Optional parameters
     * @param {module:api/DynamicViewsApi~apiDatabasesdatabaseNameCollectionscollectionNameDynamicViewsDynamicViewNameFindDeleteCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/DynamicViewDto}
     */
    apiDatabasesdatabaseNameCollectionscollectionNameDynamicViewsDynamicViewNameFindDelete(dynamicViewName, opts, callback) {
      opts = opts || {};
      let postBody = null;

      let pathParams = {
        'dynamicViewName': dynamicViewName
      };
      let queryParams = {
        'collectionName': opts['collectionName'],
        'databaseName': opts['databaseName']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = DynamicViewDto;

      return ApiClient.instance.callApi(
        '/api/databases/:databaseName/collections/:collectionName/dynamicViews/{dynamicViewName}/find', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }
    /**
     * Callback function to receive the result of the apiDatabasesdatabaseNameCollectionscollectionNameDynamicViewsDynamicViewNameFindGet operation.
     * @callback module:api/DynamicViewsApi~apiDatabasesdatabaseNameCollectionscollectionNameDynamicViewsDynamicViewNameFindGetCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/DynamicViewFilter>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get filters
     * Get filters from an Dynamic view from an collection
     * @param {Object} opts Optional parameters
     * @param {module:api/DynamicViewsApi~apiDatabasesdatabaseNameCollectionscollectionNameDynamicViewsDynamicViewNameFindGetCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/DynamicViewFilter>}
     */
    apiDatabasesdatabaseNameCollectionscollectionNameDynamicViewsDynamicViewNameFindGet(dynamicViewName, opts, callback) {
      opts = opts || {};
      let postBody = null;

      let pathParams = {
        'dynamicViewName': dynamicViewName
      };
      let queryParams = {
        'collectionName': opts['collectionName'],
        'databaseName': opts['databaseName']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = [DynamicViewFilter];

      return ApiClient.instance.callApi(
        '/api/databases/:databaseName/collections/:collectionName/dynamicViews/{dynamicViewName}/find', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }
    /**
     * Callback function to receive the result of the apiDatabasesdatabaseNameCollectionscollectionNameDynamicViewsDynamicViewNameFindPost operation.
     * @callback module:api/DynamicViewsApi~apiDatabasesdatabaseNameCollectionscollectionNameDynamicViewsDynamicViewNameFindPostCallback
     * @param {String} error Error message, if any.
     * @param {module:model/DynamicViewDto} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Apply find actions
     * Apply find actions in an Dynamic view from an collection
     * @param {Object} opts Optional parameters
     * @param {module:api/DynamicViewsApi~apiDatabasesdatabaseNameCollectionscollectionNameDynamicViewsDynamicViewNameFindPostCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/DynamicViewDto}
     */
    apiDatabasesdatabaseNameCollectionscollectionNameDynamicViewsDynamicViewNameFindPost(dynamicViewName, opts, callback) {
      opts = opts || {};
      let postBody = opts['body'];

      let pathParams = {
        'dynamicViewName': dynamicViewName
      };
      let queryParams = {
        'collectionName': opts['collectionName'],
        'databaseName': opts['databaseName']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = DynamicViewDto;

      return ApiClient.instance.callApi(
        '/api/databases/:databaseName/collections/:collectionName/dynamicViews/{dynamicViewName}/find', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }
    /**
     * Callback function to receive the result of the apiDatabasesdatabaseNameCollectionscollectionNameDynamicViewsDynamicViewNameFindUidDelete operation.
     * @callback module:api/DynamicViewsApi~apiDatabasesdatabaseNameCollectionscollectionNameDynamicViewsDynamicViewNameFindUidDeleteCallback
     * @param {String} error Error message, if any.
     * @param {module:model/DynamicViewDto} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Remove an filter
     * Remove an filter by uid from an Dynamic view from an collection
     * @param {Object} opts Optional parameters
     * @param {module:api/DynamicViewsApi~apiDatabasesdatabaseNameCollectionscollectionNameDynamicViewsDynamicViewNameFindUidDeleteCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/DynamicViewDto}
     */
    apiDatabasesdatabaseNameCollectionscollectionNameDynamicViewsDynamicViewNameFindUidDelete(dynamicViewName, uid, opts, callback) {
      opts = opts || {};
      let postBody = null;

      let pathParams = {
        'dynamicViewName': dynamicViewName,
        'uid': uid
      };
      let queryParams = {
        'collectionName': opts['collectionName'],
        'databaseName': opts['databaseName']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = DynamicViewDto;

      return ApiClient.instance.callApi(
        '/api/databases/:databaseName/collections/:collectionName/dynamicViews/{dynamicViewName}/find/{uid}', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }
    /**
     * Callback function to receive the result of the apiDatabasesdatabaseNameCollectionscollectionNameDynamicViewsDynamicViewNameFindUidGet operation.
     * @callback module:api/DynamicViewsApi~apiDatabasesdatabaseNameCollectionscollectionNameDynamicViewsDynamicViewNameFindUidGetCallback
     * @param {String} error Error message, if any.
     * @param {module:model/DynamicViewFilter} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * get an filter
     * get an filter by uid from an Dynamic view from an collection
     * @param {Object} opts Optional parameters
     * @param {module:api/DynamicViewsApi~apiDatabasesdatabaseNameCollectionscollectionNameDynamicViewsDynamicViewNameFindUidGetCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/DynamicViewFilter}
     */
    apiDatabasesdatabaseNameCollectionscollectionNameDynamicViewsDynamicViewNameFindUidGet(dynamicViewName, uid, opts, callback) {
      opts = opts || {};
      let postBody = null;

      let pathParams = {
        'dynamicViewName': dynamicViewName,
        'uid': uid
      };
      let queryParams = {
        'collectionName': opts['collectionName'],
        'databaseName': opts['databaseName']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = DynamicViewFilter;

      return ApiClient.instance.callApi(
        '/api/databases/:databaseName/collections/:collectionName/dynamicViews/{dynamicViewName}/find/{uid}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }
    /**
     * Callback function to receive the result of the apiDatabasesdatabaseNameCollectionscollectionNameDynamicViewsDynamicViewNameGet operation.
     * @callback module:api/DynamicViewsApi~apiDatabasesdatabaseNameCollectionscollectionNameDynamicViewsDynamicViewNameGetCallback
     * @param {String} error Error message, if any.
     * @param {module:model/DynamicViewDto} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Find by name
     * get an Dynamic view from an collection
     * @param {Object} opts Optional parameters
     * @param {module:api/DynamicViewsApi~apiDatabasesdatabaseNameCollectionscollectionNameDynamicViewsDynamicViewNameGetCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/DynamicViewDto}
     */
    apiDatabasesdatabaseNameCollectionscollectionNameDynamicViewsDynamicViewNameGet(dynamicViewName, opts, callback) {
      opts = opts || {};
      let postBody = null;

      let pathParams = {
        'dynamicViewName': dynamicViewName
      };
      let queryParams = {
        'collectionName': opts['collectionName'],
        'databaseName': opts['databaseName']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = DynamicViewDto;

      return ApiClient.instance.callApi(
        '/api/databases/:databaseName/collections/:collectionName/dynamicViews/{dynamicViewName}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }
    /**
     * Callback function to receive the result of the apiDatabasesdatabaseNameCollectionscollectionNameDynamicViewsDynamicViewNameSortPost operation.
     * @callback module:api/DynamicViewsApi~apiDatabasesdatabaseNameCollectionscollectionNameDynamicViewsDynamicViewNameSortPostCallback
     * @param {String} error Error message, if any.
     * @param {module:model/DynamicViewDto} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Apply multiple sorts
     * Apply multple sorts on an Dynamic view from an collection
     * @param {Object} opts Optional parameters
     * @param {module:api/DynamicViewsApi~apiDatabasesdatabaseNameCollectionscollectionNameDynamicViewsDynamicViewNameSortPostCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/DynamicViewDto}
     */
    apiDatabasesdatabaseNameCollectionscollectionNameDynamicViewsDynamicViewNameSortPost(dynamicViewName, opts, callback) {
      opts = opts || {};
      let postBody = opts['body'];

      let pathParams = {
        'dynamicViewName': dynamicViewName
      };
      let queryParams = {
        'collectionName': opts['collectionName'],
        'databaseName': opts['databaseName']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = DynamicViewDto;

      return ApiClient.instance.callApi(
        '/api/databases/:databaseName/collections/:collectionName/dynamicViews/{dynamicViewName}/sort', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }
    /**
     * Callback function to receive the result of the apiDatabasesdatabaseNameCollectionscollectionNameDynamicViewsDynamicViewNameSortPropertyNameDescPost operation.
     * @callback module:api/DynamicViewsApi~apiDatabasesdatabaseNameCollectionscollectionNameDynamicViewsDynamicViewNameSortPropertyNameDescPostCallback
     * @param {String} error Error message, if any.
     * @param {module:model/DynamicViewDto} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Apply simple sort with desc
     * Apply simple sort with desc on an Dynamic view from an collection
     * @param {Object} opts Optional parameters
     * @param {module:api/DynamicViewsApi~apiDatabasesdatabaseNameCollectionscollectionNameDynamicViewsDynamicViewNameSortPropertyNameDescPostCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/DynamicViewDto}
     */
    apiDatabasesdatabaseNameCollectionscollectionNameDynamicViewsDynamicViewNameSortPropertyNameDescPost(desc, dynamicViewName, propertyName, opts, callback) {
      opts = opts || {};
      let postBody = null;

      let pathParams = {
        'desc': desc,
        'dynamicViewName': dynamicViewName,
        'propertyName': propertyName
      };
      let queryParams = {
        'collectionName': opts['collectionName'],
        'databaseName': opts['databaseName']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = DynamicViewDto;

      return ApiClient.instance.callApi(
        '/api/databases/:databaseName/collections/:collectionName/dynamicViews/{dynamicViewName}/sort/{propertyName}/{desc}', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }
    /**
     * Callback function to receive the result of the apiDatabasesdatabaseNameCollectionscollectionNameDynamicViewsDynamicViewNameSortPropertyNamePost operation.
     * @callback module:api/DynamicViewsApi~apiDatabasesdatabaseNameCollectionscollectionNameDynamicViewsDynamicViewNameSortPropertyNamePostCallback
     * @param {String} error Error message, if any.
     * @param {module:model/DynamicViewDto} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Apply simple sort
     * Apply simple sort on an Dynamic view from an collection
     * @param {Object} opts Optional parameters
     * @param {module:api/DynamicViewsApi~apiDatabasesdatabaseNameCollectionscollectionNameDynamicViewsDynamicViewNameSortPropertyNamePostCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/DynamicViewDto}
     */
    apiDatabasesdatabaseNameCollectionscollectionNameDynamicViewsDynamicViewNameSortPropertyNamePost(dynamicViewName, propertyName, opts, callback) {
      opts = opts || {};
      let postBody = null;

      let pathParams = {
        'dynamicViewName': dynamicViewName,
        'propertyName': propertyName
      };
      let queryParams = {
        'collectionName': opts['collectionName'],
        'databaseName': opts['databaseName']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = DynamicViewDto;

      return ApiClient.instance.callApi(
        '/api/databases/:databaseName/collections/:collectionName/dynamicViews/{dynamicViewName}/sort/{propertyName}', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }
    /**
     * Callback function to receive the result of the apiDatabasesdatabaseNameCollectionscollectionNameDynamicViewsDynamicViewNameTransformTransformNamePost operation.
     * @callback module:api/DynamicViewsApi~apiDatabasesdatabaseNameCollectionscollectionNameDynamicViewsDynamicViewNameTransformTransformNamePostCallback
     * @param {String} error Error message, if any.
     * @param {module:model/DynamicViewDto} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Apply transform
     * Apply transform on an Dynamic view from an collection
     * @param {Object} opts Optional parameters
     * @param {module:api/DynamicViewsApi~apiDatabasesdatabaseNameCollectionscollectionNameDynamicViewsDynamicViewNameTransformTransformNamePostCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/DynamicViewDto}
     */
    apiDatabasesdatabaseNameCollectionscollectionNameDynamicViewsDynamicViewNameTransformTransformNamePost(dynamicViewName, transformName, opts, callback) {
      opts = opts || {};
      let postBody = null;

      let pathParams = {
        'dynamicViewName': dynamicViewName,
        'transformName': transformName
      };
      let queryParams = {
        'collectionName': opts['collectionName'],
        'databaseName': opts['databaseName']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = DynamicViewDto;

      return ApiClient.instance.callApi(
        '/api/databases/:databaseName/collections/:collectionName/dynamicViews/{dynamicViewName}/transform/{transformName}', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }
    /**
     * Callback function to receive the result of the apiDatabasesdatabaseNameCollectionscollectionNameDynamicViewsGet operation.
     * @callback module:api/DynamicViewsApi~apiDatabasesdatabaseNameCollectionscollectionNameDynamicViewsGetCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/DynamicViewDto>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * List
     * List all Dynamic view from an collection
     * @param {Object} opts Optional parameters
     * @param {module:api/DynamicViewsApi~apiDatabasesdatabaseNameCollectionscollectionNameDynamicViewsGetCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/DynamicViewDto>}
     */
    apiDatabasesdatabaseNameCollectionscollectionNameDynamicViewsGet(opts, callback) {
      opts = opts || {};
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
        'collectionName': opts['collectionName'],
        'databaseName': opts['databaseName']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = [DynamicViewDto];

      return ApiClient.instance.callApi(
        '/api/databases/:databaseName/collections/:collectionName/dynamicViews', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }
    /**
     * Callback function to receive the result of the apiDatabasesdatabaseNameCollectionscollectionNameDynamicViewsPost operation.
     * @callback module:api/DynamicViewsApi~apiDatabasesdatabaseNameCollectionscollectionNameDynamicViewsPostCallback
     * @param {String} error Error message, if any.
     * @param {module:model/DynamicViewDto} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * List
     * List all Dynamic view from an collection
     * @param {Object} opts Optional parameters
     * @param {module:api/DynamicViewsApi~apiDatabasesdatabaseNameCollectionscollectionNameDynamicViewsPostCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/DynamicViewDto}
     */
    apiDatabasesdatabaseNameCollectionscollectionNameDynamicViewsPost(opts, callback) {
      opts = opts || {};
      let postBody = opts['body'];

      let pathParams = {
      };
      let queryParams = {
        'collectionName': opts['collectionName'],
        'databaseName': opts['databaseName']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = DynamicViewDto;

      return ApiClient.instance.callApi(
        '/api/databases/:databaseName/collections/:collectionName/dynamicViews', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

}
