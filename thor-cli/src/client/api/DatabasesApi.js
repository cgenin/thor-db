/**
 * Database API
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: 1.0.0
 *
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 *
 */

import ApiClient from "../ApiClient";
import ThorDto from '../model/ThorDto';

/**
* Databases service.
* @module api/DatabasesApi
* @version 1.0.0
*/
export default class DatabasesApi {

    /**
    * Constructs a new DatabasesApi.
    * @alias module:api/DatabasesApi
    * @class
    * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
    * default to {@link module:ApiClient#instance} if unspecified.
    */
    constructor(apiClient) {
        this.apiClient = apiClient || ApiClient.instance;
    }

    /**
     * Callback function to receive the result of the apiDatabasesDatabaseNameDelete operation.
     * @callback module:api/DatabasesApi~apiDatabasesDatabaseNameDeleteCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ThorDto} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Remove
     * Remove an specific databaseCommands
     * @param {module:api/DatabasesApi~apiDatabasesDatabaseNameDeleteCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ThorDto}
     */
    apiDatabasesDatabaseNameDelete(databaseName, callback) {
      let postBody = null;

      let pathParams = {
        'databaseName': databaseName
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = ThorDto;

      return ApiClient.instance.callApi(
        '/api/databases/{databaseName}', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }
    /**
     * Callback function to receive the result of the apiDatabasesDatabaseNameGet operation.
     * @callback module:api/DatabasesApi~apiDatabasesDatabaseNameGetCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ThorDto} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get
     * Get an specific databaseCommands
     * @param {module:api/DatabasesApi~apiDatabasesDatabaseNameGetCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ThorDto}
     */
    apiDatabasesDatabaseNameGet(databaseName, callback) {
      let postBody = null;

      let pathParams = {
        'databaseName': databaseName
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = ThorDto;

      return ApiClient.instance.callApi(
        '/api/databases/{databaseName}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    apiDatabasesDatabaseNameLoadPost(databaseName, callback) {
        let postBody = null;

        let pathParams = {
            'databaseName': databaseName
        };
        let queryParams = {
        };
        let headerParams = {
        };
        let formParams = {
        };

        let authNames = [];
        let contentTypes = [];
        let accepts = ['application/json'];
        let returnType = ThorDto;

        return ApiClient.instance.callApi(
            '/api/databases/{databaseName}/load', 'POST',
            pathParams, queryParams, headerParams, formParams, postBody,
            authNames, contentTypes, accepts, returnType, callback
        );
    }
    /**
     * Callback function to receive the result of the apiDatabasesDatabaseNamePost operation.
     * @callback module:api/DatabasesApi~apiDatabasesDatabaseNamePostCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ThorDto} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Create
     * Create an databaseCommands
     * @param {Object} opts Optional parameters
     * @param {module:api/DatabasesApi~apiDatabasesDatabaseNamePostCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ThorDto}
     */
    apiDatabasesDatabaseNamePost(databaseName, callback) {
      let postBody = undefined;

      let pathParams = {
        'databaseName': databaseName
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = ThorDto;

      return ApiClient.instance.callApi(
        '/api/databases/{databaseName}', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    apiDatabasesDatabaseNamePut(databaseName, callback) {
        //opts = opts || {};
        let postBody = undefined;

        let pathParams = {
            'databaseName': databaseName
        };
        let queryParams = {
        };
        let headerParams = {
        };
        let formParams = {
        };

        let authNames = [];
        let contentTypes = ['application/json'];
        let accepts = ['application/json'];
        let returnType = ThorDto;

        return ApiClient.instance.callApi(
            '/api/databases/{databaseName}', 'PUT',
            pathParams, queryParams, headerParams, formParams, postBody,
            authNames, contentTypes, accepts, returnType, callback
        );
    }

    /**
     * Callback function to receive the result of the apiDatabasesGet operation.
     * @callback module:api/DatabasesApi~apiDatabasesGetCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/ThorDto>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * List
     * List all active databases
     * @param {module:api/DatabasesApi~apiDatabasesGetCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/ThorDto>}
     */
    apiDatabasesGet(callback) {
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = [ThorDto];

      return ApiClient.instance.callApi(
        '/api/databases', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }


}
