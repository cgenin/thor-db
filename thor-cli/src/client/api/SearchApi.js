/**
 * Database API
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 *
 */

import ApiClient from "../ApiClient";
import JsonObject from '../model/JsonObject';

/**
* Search service.
* @module api/SearchApi
* @version 1.0.0
*/
export default class SearchApi {

    /**
    * Constructs a new SearchApi. 
    * @alias module:api/SearchApi
    * @class
    * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
    * default to {@link module:ApiClient#instance} if unspecified.
    */
    constructor(apiClient) {
        this.apiClient = apiClient || ApiClient.instance;
    }

    /**
     * Callback function to receive the result of the apiDatabasesdatabaseNameCollectionscollectionNameByPropertyValueGet operation.
     * @callback module:api/SearchApi~apiDatabasesdatabaseNameCollectionscollectionNameByPropertyValueGetCallback
     * @param {String} error Error message, if any.
     * @param {module:model/JsonObject} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * By Unique Index
     * Find an object by unique index
     * @param {Object} opts Optional parameters
     * @param {module:api/SearchApi~apiDatabasesdatabaseNameCollectionscollectionNameByPropertyValueGetCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/JsonObject}
     */
    apiDatabasesdatabaseNameCollectionscollectionNameByPropertyValueGet(property, value, opts, callback) {
      opts = opts || {};
      let postBody = null;

      let pathParams = {
        'property': property,
        'value': value
      };
      let queryParams = {
        'collectionName': opts['collectionName'],
        'databaseName': opts['databaseName']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = JsonObject;

      return ApiClient.instance.callApi(
        '/api/databases/:databaseName/collections/:collectionName/by/{property}/{value}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }
    /**
     * Callback function to receive the result of the apiDatabasesdatabaseNameCollectionscollectionNameChainTransformCountGet operation.
     * @callback module:api/SearchApi~apiDatabasesdatabaseNameCollectionscollectionNameChainTransformCountGetCallback
     * @param {String} error Error message, if any.
     * @param {'Number'} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get number of results for an specified transform
     * Get number of results for an specified transform
     * @param {Object} opts Optional parameters
     * @param {module:api/SearchApi~apiDatabasesdatabaseNameCollectionscollectionNameChainTransformCountGetCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link 'Number'}
     */
    apiDatabasesdatabaseNameCollectionscollectionNameChainTransformCountGet(transform, opts, callback) {
      opts = opts || {};
      let postBody = null;

      let pathParams = {
        'transform': transform
      };
      let queryParams = {
        'collectionName': opts['collectionName'],
        'databaseName': opts['databaseName']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = 'Number';

      return ApiClient.instance.callApi(
        '/api/databases/:databaseName/collections/:collectionName/chain/{transform}/count', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }
    /**
     * Callback function to receive the result of the apiDatabasesdatabaseNameCollectionscollectionNameChainTransformDataGet operation.
     * @callback module:api/SearchApi~apiDatabasesdatabaseNameCollectionscollectionNameChainTransformDataGetCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/JsonObject>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get results from an specified transform
     * Get results from an specified transform
     * @param {Object} opts Optional parameters
     * @param {module:api/SearchApi~apiDatabasesdatabaseNameCollectionscollectionNameChainTransformDataGetCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/JsonObject>}
     */
    apiDatabasesdatabaseNameCollectionscollectionNameChainTransformDataGet(transform, opts, callback) {
      opts = opts || {};
      let postBody = null;

      let pathParams = {
        'transform': transform
      };
      let queryParams = {
        'collectionName': opts['collectionName'],
        'databaseName': opts['databaseName']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = [JsonObject];

      return ApiClient.instance.callApi(
        '/api/databases/:databaseName/collections/:collectionName/chain/{transform}/data', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }
    /**
     * Callback function to receive the result of the apiDatabasesdatabaseNameCollectionscollectionNameChainTransformDelete operation.
     * @callback module:api/SearchApi~apiDatabasesdatabaseNameCollectionscollectionNameChainTransformDeleteCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/JsonObject>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Remove from an specified transform
     * Remove from an specified transform
     * @param {Object} opts Optional parameters
     * @param {module:api/SearchApi~apiDatabasesdatabaseNameCollectionscollectionNameChainTransformDeleteCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/JsonObject>}
     */
    apiDatabasesdatabaseNameCollectionscollectionNameChainTransformDelete(transform, opts, callback) {
      opts = opts || {};
      let postBody = null;

      let pathParams = {
        'transform': transform
      };
      let queryParams = {
        'collectionName': opts['collectionName'],
        'databaseName': opts['databaseName']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = [JsonObject];

      return ApiClient.instance.callApi(
        '/api/databases/:databaseName/collections/:collectionName/chain/{transform}', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }
    /**
     * Callback function to receive the result of the apiDatabasesdatabaseNameCollectionscollectionNameFindDelete operation.
     * @callback module:api/SearchApi~apiDatabasesdatabaseNameCollectionscollectionNameFindDeleteCallback
     * @param {String} error Error message, if any.
     * @param {'Boolean'} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Find and remove
     * Find and remove from  query
     * @param {Object} opts Optional parameters
     * @param {module:api/SearchApi~apiDatabasesdatabaseNameCollectionscollectionNameFindDeleteCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link 'Boolean'}
     */
    apiDatabasesdatabaseNameCollectionscollectionNameFindDelete(opts, callback) {
      opts = opts || {};
      let postBody = opts['body'];

      let pathParams = {
      };
      let queryParams = {
        'collectionName': opts['collectionName'],
        'databaseName': opts['databaseName']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = 'Boolean';

      return ApiClient.instance.callApi(
        '/api/databases/:databaseName/collections/:collectionName/find', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }
    /**
     * Callback function to receive the result of the apiDatabasesdatabaseNameCollectionscollectionNameFindFirstPost operation.
     * @callback module:api/SearchApi~apiDatabasesdatabaseNameCollectionscollectionNameFindFirstPostCallback
     * @param {String} error Error message, if any.
     * @param {module:model/JsonObject} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Find first
     * Find first object from  query
     * @param {Object} opts Optional parameters
     * @param {module:api/SearchApi~apiDatabasesdatabaseNameCollectionscollectionNameFindFirstPostCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/JsonObject}
     */
    apiDatabasesdatabaseNameCollectionscollectionNameFindFirstPost(opts, callback) {
      opts = opts || {};
      let postBody = opts['body'];

      let pathParams = {
      };
      let queryParams = {
        'collectionName': opts['collectionName'],
        'databaseName': opts['databaseName']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = JsonObject;

      return ApiClient.instance.callApi(
        '/api/databases/:databaseName/collections/:collectionName/find-first', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }
    /**
     * Callback function to receive the result of the apiDatabasesdatabaseNameCollectionscollectionNameFindPost operation.
     * @callback module:api/SearchApi~apiDatabasesdatabaseNameCollectionscollectionNameFindPostCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/JsonObject>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Find
     * Find data from  query
     * @param {Object} opts Optional parameters
     * @param {module:api/SearchApi~apiDatabasesdatabaseNameCollectionscollectionNameFindPostCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/JsonObject>}
     */
    apiDatabasesdatabaseNameCollectionscollectionNameFindPost(opts, callback) {
      opts = opts || {};
      let postBody = opts['body'];

      let pathParams = {
      };
      let queryParams = {
        'collectionName': opts['collectionName'],
        'databaseName': opts['databaseName']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = [JsonObject];

      return ApiClient.instance.callApi(
        '/api/databases/:databaseName/collections/:collectionName/find', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }
    /**
     * Callback function to receive the result of the apiDatabasesdatabaseNameCollectionscollectionNameFindQueriesObjectPost operation.
     * @callback module:api/SearchApi~apiDatabasesdatabaseNameCollectionscollectionNameFindQueriesObjectPostCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/JsonObject>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Find by multiple queries
     * Find by multiple queries (object body) from  query
     * @param {Object} opts Optional parameters
     * @param {module:api/SearchApi~apiDatabasesdatabaseNameCollectionscollectionNameFindQueriesObjectPostCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/JsonObject>}
     */
    apiDatabasesdatabaseNameCollectionscollectionNameFindQueriesObjectPost(opts, callback) {
      opts = opts || {};
      let postBody = opts['body'];

      let pathParams = {
      };
      let queryParams = {
        'collectionName': opts['collectionName'],
        'databaseName': opts['databaseName']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = [JsonObject];

      return ApiClient.instance.callApi(
        '/api/databases/:databaseName/collections/:collectionName/find-queries-object', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }
    /**
     * Callback function to receive the result of the apiDatabasesdatabaseNameCollectionscollectionNameFindQueriesPost operation.
     * @callback module:api/SearchApi~apiDatabasesdatabaseNameCollectionscollectionNameFindQueriesPostCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/JsonObject>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Find by multiple queries
     * Find by multiple queries (array body) from  query
     * @param {Object} opts Optional parameters
     * @param {module:api/SearchApi~apiDatabasesdatabaseNameCollectionscollectionNameFindQueriesPostCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/JsonObject>}
     */
    apiDatabasesdatabaseNameCollectionscollectionNameFindQueriesPost(opts, callback) {
      opts = opts || {};
      let postBody = opts['body'];

      let pathParams = {
      };
      let queryParams = {
        'collectionName': opts['collectionName'],
        'databaseName': opts['databaseName']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = [JsonObject];

      return ApiClient.instance.callApi(
        '/api/databases/:databaseName/collections/:collectionName/find-queries', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

}
