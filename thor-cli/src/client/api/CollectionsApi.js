/**
 * Database API
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: 1.0.0
 *
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import CollectionDto from '../model/CollectionDto';

/**
 * Collections service.
 * @module api/CollectionsApi
 * @version 1.0.0
 */
export default class CollectionsApi {

    /**
     * Constructs a new CollectionsApi.
     * @alias module:api/CollectionsApi
     * @class
     * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
     * default to {@link module:ApiClient#instance} if unspecified.
     */
    constructor(apiClient) {
        this.apiClient = apiClient || ApiClient.instance;
    }

    /**
     * Callback function to receive the result of the apiDatabasesdatabaseNameCollectionsCollectionNameBinaryIndicesGet operation.
     * @callback module:api/CollectionsApi~apiDatabasesdatabaseNameCollectionsCollectionNameBinaryIndicesGetCallback
     * @param {String} error Error message, if any.
     * @param {Array.<'String'>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get binary indices
     * Get binary indices from an collection.
     * @param {Object} opts Optional parameters
     * @param {module:api/CollectionsApi~apiDatabasesdatabaseNameCollectionsCollectionNameBinaryIndicesGetCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<'String'>}
     */
    getBinaryIndices(databaseName, collectionName, callback) {
        let postBody = null;

        let pathParams = {
            databaseName,
            collectionName
        };

        let headerParams = {};
        let formParams = {};

        let authNames = [];
        let contentTypes = [];
        let accepts = ['application/json'];
        let returnType = ['String'];

        return ApiClient.instance.callApi(
            '/api/databases/{databaseName}/collections/{collectionName}/binaryIndices', 'GET',
            pathParams, queryParams, headerParams, formParams, postBody,
            authNames, contentTypes, accepts, returnType, callback
        );
    }

    /**
     * Callback function to receive the result of the apiDatabasesdatabaseNameCollectionsCollectionNameCloneObjectsGet operation.
     * @callback module:api/CollectionsApi~apiDatabasesdatabaseNameCollectionsCollectionNameCloneObjectsGetCallback
     * @param {String} error Error message, if any.
     * @param {'Boolean'} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get clone objects property
     * Get clone objects property from an collection.
     * @param {Object} opts Optional parameters
     * @param {module:api/CollectionsApi~apiDatabasesdatabaseNameCollectionsCollectionNameCloneObjectsGetCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link 'Boolean'}
     */
    getCloneObject(databaseName,collectionName, opts, callback) {
        opts = opts || {};
        let postBody = null;

        let pathParams = {
            databaseName,
            collectionName
        };
        let queryParams = {
        };
        let headerParams = {};
        let formParams = {};

        let authNames = [];
        let contentTypes = [];
        let accepts = ['application/json'];
        let returnType = 'Boolean';

        return ApiClient.instance.callApi(
            '/api/databases/{databaseName}/collections/{collectionName}/cloneObjects', 'GET',
            pathParams, queryParams, headerParams, formParams, postBody,
            authNames, contentTypes, accepts, returnType, callback
        );
    }

    /**
     * Callback function to receive the result of the apiDatabasesdatabaseNameCollectionsCollectionNameCountGet operation.
     * @callback module:api/CollectionsApi~apiDatabasesdatabaseNameCollectionsCollectionNameCountGetCallback
     * @param {String} error Error message, if any.
     * @param {'Number'} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Count
     * Count all data from an collection.
     * @param {Object} opts Optional parameters
     * @param {module:api/CollectionsApi~apiDatabasesdatabaseNameCollectionsCollectionNameCountGetCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link 'Number'}
     */
    count(databaseName, collectionName, callback) {
        let postBody = null;

        let pathParams = {
            databaseName, collectionName
        };
        let queryParams = {

        };
        let headerParams = {};
        let formParams = {};

        let authNames = [];
        let contentTypes = [];
        let accepts = ['application/json'];
        let returnType = 'Number';

        return ApiClient.instance.callApi(
            '/api/databases/{databaseName}/collections/{collectionName}/count', 'GET',
            pathParams, queryParams, headerParams, formParams, postBody,
            authNames, contentTypes, accepts, returnType, callback
        );
    }

    /**
     * Callback function to receive the result of the apiDatabasesdatabaseNameCollectionsCollectionNameDataDelete operation.
     * @callback module:api/CollectionsApi~apiDatabasesdatabaseNameCollectionsCollectionNameDataDeleteCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/Object>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * clears datas
     * Clear all data from an collection.
     * @param {Object} opts Optional parameters
     * @param {module:api/CollectionsApi~apiDatabasesdatabaseNameCollectionsCollectionNameDataDeleteCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/Object>}
     */
    clearData(databaseName, collectionName,  callback) {
        let postBody = null;

        let pathParams = {
            databaseName, collectionName
        };
        let queryParams = {

        };
        let headerParams = {};
        let formParams = {};

        let authNames = [];
        let contentTypes = [];
        let accepts = ['application/json'];
        let returnType = [Object];

        return ApiClient.instance.callApi(
            '/api/databases/{databaseName}/collections/{collectionName}/data', 'DELETE',
            pathParams, queryParams, headerParams, formParams, postBody,
            authNames, contentTypes, accepts, returnType, callback
        );
    }

    /**
     * Callback function to receive the result of the apiDatabasesdatabaseNameCollectionsCollectionNameDataGet operation.
     * @callback module:api/CollectionsApi~apiDatabasesdatabaseNameCollectionsCollectionNameDataGetCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/Object>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get all datas
     * get all data from an collection.
     * @param {Object} opts Optional parameters
     * @param {module:api/CollectionsApi~apiDatabasesdatabaseNameCollectionsCollectionNameDataGetCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/Object>}
     */
    getDatas(databaseName, collectionName,  callback) {
        let postBody = null;

        let pathParams = {
            databaseName, collectionName
        };
        let queryParams = {

        };
        let headerParams = {};
        let formParams = {};

        let authNames = [];
        let contentTypes = [];
        let accepts = ['application/json'];
        let returnType = [Object];

        return ApiClient.instance.callApi(
            '/api/databases/{databaseName}/collections/{collectionName}/data', 'GET',
            pathParams, queryParams, headerParams, formParams, postBody,
            authNames, contentTypes, accepts, returnType, callback
        );
    }

    /**
     * Callback function to receive the result of the apiDatabasesdatabaseNameCollectionsCollectionNameDataIdLokiGet operation.
     * @callback module:api/CollectionsApi~apiDatabasesdatabaseNameCollectionsCollectionNameDataIdLokiGetCallback
     * @param {String} error Error message, if any.
     * @param {module:model/Object} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get an data object
     * Get an data object by id from an collection.
     * @param {Object} opts Optional parameters
     * @param {module:api/CollectionsApi~apiDatabasesdatabaseNameCollectionsCollectionNameDataIdLokiGetCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/Object}
     */
    getDataById(databaseName, collectionName, idLoki,  callback) {
        let postBody = null;

        let pathParams = {
            databaseName, collectionName,
            'idLoki': idLoki
        };
        let queryParams = {

        };
        let headerParams = {};
        let formParams = {};

        let authNames = [];
        let contentTypes = [];
        let accepts = ['application/json'];
        let returnType = Object;

        return ApiClient.instance.callApi(
            '/api/databases/{databaseName}/collections/{collectionName}/data/{idLoki}', 'GET',
            pathParams, queryParams, headerParams, formParams, postBody,
            authNames, contentTypes, accepts, returnType, callback
        );
    }

    /**
     * Callback function to receive the result of the apiDatabasesdatabaseNameCollectionsCollectionNameDataPost operation.
     * @callback module:api/CollectionsApi~apiDatabasesdatabaseNameCollectionsCollectionNameDataPostCallback
     * @param {String} error Error message, if any.
     * @param {module:model/Object} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * add a new data
     * Add data to an collection.
     * @param {Object} opts Optional parameters
     * @param {module:api/CollectionsApi~apiDatabasesdatabaseNameCollectionsCollectionNameDataPostCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/Object}
     */
    addData(databaseName, collectionName, body, callback) {

        let postBody = body;

        let pathParams = {
            databaseName, collectionName
        };
        let queryParams = {

        };
        let headerParams = {};
        let formParams = {};

        let authNames = [];
        let contentTypes = ['application/json'];
        let accepts = ['application/json'];
        let returnType = Object;

        return ApiClient.instance.callApi(
            '/api/databases/{databaseName}/collections/{collectionName}/data', 'POST',
            pathParams, queryParams, headerParams, formParams, postBody,
            authNames, contentTypes, accepts, returnType, callback
        );
    }

    /**
     * Callback function to receive the result of the apiDatabasesdatabaseNameCollectionsCollectionNameDelete operation.
     * @callback module:api/CollectionsApi~apiDatabasesdatabaseNameCollectionsCollectionNameDeleteCallback
     * @param {String} error Error message, if any.
     * @param {'Boolean'} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Delete
     * Remove an collection.
     * @param {Object} opts Optional parameters
     * @param {module:api/CollectionsApi~apiDatabasesdatabaseNameCollectionsCollectionNameDeleteCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link 'Boolean'}
     */
    deleteCollection(databaseName, collectionName,  callback) {
        let postBody = null;

        let pathParams = {
            databaseName, collectionName
        };
        let queryParams = {

        };
        let headerParams = {};
        let formParams = {};

        let authNames = [];
        let contentTypes = [];
        let accepts = ['application/json'];
        let returnType = 'Boolean';

        return ApiClient.instance.callApi(
            '/api/databases/{databaseName}/collections/{collectionName}', 'DELETE',
            pathParams, queryParams, headerParams, formParams, postBody,
            authNames, contentTypes, accepts, returnType, callback
        );
    }

    /**
     * Callback function to receive the result of the getCollection operation.
     * @callback module:api/CollectionsApi~apiDatabasesdatabaseNameCollectionsCollectionNameGetCallback
     * @param {String} error Error message, if any.
     * @param {module:model/CollectionDto} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get
     * Find an collection by name
     * @param {Object} opts Optional parameters
     * @param {module:api/CollectionsApi~apiDatabasesdatabaseNameCollectionsCollectionNameGetCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/CollectionDto}
     */
    getCollectionByName(databaseName, collectionName,  callback) {
        let postBody = null;

        let pathParams = {
            databaseName, collectionName
        };
        let queryParams = {

        };
        let headerParams = {};
        let formParams = {};

        let authNames = [];
        let contentTypes = [];
        let accepts = ['application/json'];
        let returnType = CollectionDto;

        return ApiClient.instance.callApi(
            '/api/databases/{databaseName}/collections/{collectionName}', 'GET',
            pathParams, queryParams, headerParams, formParams, postBody,
            authNames, contentTypes, accepts, returnType, callback
        );
    }

    /**
     * Callback function to receive the result of the apiDatabasesdatabaseNameCollectionsCollectionNameInsertPost operation.
     * @callback module:api/CollectionsApi~apiDatabasesdatabaseNameCollectionsCollectionNameInsertPostCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/Object>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Insert array of data
     * Insert array of data to an collection.
     * @param {Object} opts Optional parameters
     * @param {module:api/CollectionsApi~apiDatabasesdatabaseNameCollectionsCollectionNameInsertPostCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/Object>}
     */
    insertDatas(databaseName, collectionName, postBody, callback) {

        let pathParams = {
            databaseName, collectionName
        };
        let queryParams = {

        };
        let headerParams = {};
        let formParams = {};

        let authNames = [];
        let contentTypes = ['application/json'];
        let accepts = ['application/json'];
        let returnType = [Object];

        return ApiClient.instance.callApi(
            '/api/databases/{databaseName}/collections/{collectionName}/insert', 'POST',
            pathParams, queryParams, headerParams, formParams, postBody,
            authNames, contentTypes, accepts, returnType, callback
        );
    }

    /**
     * Callback function to receive the result of the apiDatabasesdatabaseNameCollectionsCollectionNameIsIncrementalGet operation.
     * @callback module:api/CollectionsApi~apiDatabasesdatabaseNameCollectionsCollectionNameIsIncrementalGetCallback
     * @param {String} error Error message, if any.
     * @param {'Number'} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get maxId property
     * Get maxId property from an collection.
     * @param {Object} opts Optional parameters
     * @param {module:api/CollectionsApi~apiDatabasesdatabaseNameCollectionsCollectionNameIsIncrementalGetCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link 'Number'}
     */
    getCollectionIsIncremental(databaseName, collectionName,  callback) {
        let postBody = null;

        let pathParams = {
            databaseName, collectionName
        };
        let queryParams = {

        };
        let headerParams = {};
        let formParams = {};

        let authNames = [];
        let contentTypes = [];
        let accepts = ['application/json'];
        let returnType = 'Number';

        return ApiClient.instance.callApi(
            '/api/databases/{databaseName}/collections/{collectionName}/isIncremental', 'GET',
            pathParams, queryParams, headerParams, formParams, postBody,
            authNames, contentTypes, accepts, returnType, callback
        );
    }

    /**
     * Callback function to receive the result of the apiDatabasesdatabaseNameCollectionsCollectionNamePost operation.
     * @callback module:api/CollectionsApi~apiDatabasesdatabaseNameCollectionsCollectionNamePostCallback
     * @param {String} error Error message, if any.
     * @param {module:model/CollectionDto} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Add
     * Add an collection
     * @param {Object} opts Optional parameters
     * @param {module:api/CollectionsApi~apiDatabasesdatabaseNameCollectionsCollectionNamePostCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/CollectionDto}
     */
    createCollection(databaseName, collectionName,  callback) {
        let postBody = null;

        let pathParams = {
            databaseName, collectionName
        };
        let queryParams = {

        };
        let headerParams = {};
        let formParams = {};

        let authNames = [];
        let contentTypes = ['application/json'];
        let accepts = ['application/json'];
        let returnType = CollectionDto;

        return ApiClient.instance.callApi(
            '/api/databases/{databaseName}/collections/{collectionName}', 'POST',
            pathParams, queryParams, headerParams, formParams, postBody,
            authNames, contentTypes, accepts, returnType, callback
        );
    }

    /**
     * Callback function to receive the result of the collections operation.
     * @callback module:api/CollectionsApi~apiDatabasesdatabaseNameCollectionsGetCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/CollectionDto>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * List
     * List collections of an datbase
     * @param {Object} opts Optional parameters
     * @param {module:api/CollectionsApi~apiDatabasesdatabaseNameCollectionsGetCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/CollectionDto>}
     */
    collections(databaseName,  callback) {
        let postBody = null;

        let pathParams = {};
        let queryParams = {
            databaseName
        };
        let headerParams = {};
        let formParams = {};

        let authNames = [];
        let contentTypes = [];
        let accepts = ['application/json'];
        let returnType = [CollectionDto];

        return ApiClient.instance.callApi(
            '/api/databases/{databaseName}/collections', 'GET',
            pathParams, queryParams, headerParams, formParams, postBody,
            authNames, contentTypes, accepts, returnType, callback
        );
    }

    /**
     * Callback function to receive the result of the apiDatabasesdatabaseNameCollectionscollectionNameAvgPropertyGet operation.
     * @callback module:api/CollectionsApi~apiDatabasesdatabaseNameCollectionscollectionNameAvgPropertyGetCallback
     * @param {String} error Error message, if any.
     * @param {'Number'} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Avg
     * Avg  query for an specific property
     * @param {Object} opts Optional parameters
     * @param {module:api/CollectionsApi~apiDatabasesdatabaseNameCollectionscollectionNameAvgPropertyGetCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link 'Number'}
     */
    getCollectionAvg(databaseName, collectionName,property, callback) {
        let postBody = null;

        let pathParams = {
            databaseName, collectionName,property
        };
        let queryParams = {

        };
        let headerParams = {};
        let formParams = {};

        let authNames = [];
        let contentTypes = [];
        let accepts = ['application/json'];
        let returnType = 'Number';

        return ApiClient.instance.callApi(
            '/api/databases/{databaseName}/collections/{collectionName}/avg/{property}', 'GET',
            pathParams, queryParams, headerParams, formParams, postBody,
            authNames, contentTypes, accepts, returnType, callback
        );
    }

    /**
     * Callback function to receive the result of the apiDatabasesdatabaseNameCollectionscollectionNameByPropertyValueGet operation.
     * @callback module:api/CollectionsApi~apiDatabasesdatabaseNameCollectionscollectionNameByPropertyValueGetCallback
     * @param {String} error Error message, if any.
     * @param {module:model/Object} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * By Unique Index
     * Find an object by unique index
     * @param {Object} opts Optional parameters
     * @param {module:api/CollectionsApi~apiDatabasesdatabaseNameCollectionscollectionNameByPropertyValueGetCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/Object}
     */
    findPropertyByUniqueIndex(databaseName, collectionName,property, value,  callback) {
        let postBody = null;

        let pathParams = {
            databaseName, collectionName,
            property,
            value
        };
        let queryParams = {
        };
        let headerParams = {};
        let formParams = {};

        let authNames = [];
        let contentTypes = [];
        let accepts = ['application/json'];
        let returnType = Object;

        return ApiClient.instance.callApi(
            '/api/databases/{databaseName}/collections/{collectionName}/by/{property}/{value}', 'GET',
            pathParams, queryParams, headerParams, formParams, postBody,
            authNames, contentTypes, accepts, returnType, callback
        );
    }

    /**
     * Callback function to receive the result of the apiDatabasesdatabaseNameCollectionscollectionNameChainTransformCountGet operation.
     * @callback module:api/CollectionsApi~apiDatabasesdatabaseNameCollectionscollectionNameChainTransformCountGetCallback
     * @param {String} error Error message, if any.
     * @param {'Number'} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get number of results for an specified transform
     * Get number of results for an specified transform
     * @param {Object} opts Optional parameters
     * @param {module:api/CollectionsApi~apiDatabasesdatabaseNameCollectionscollectionNameChainTransformCountGetCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link 'Number'}
     */
    countForTransform(databaseName, collectionName, transform,  callback) {
        let postBody = null;

        let pathParams = {
            databaseName, collectionName, transform
        };
        let queryParams = {
        };
        let headerParams = {};
        let formParams = {};

        let authNames = [];
        let contentTypes = [];
        let accepts = ['application/json'];
        let returnType = 'Number';

        return ApiClient.instance.callApi(
            '/api/databases/{databaseName}/collections/{collectionName}/chain/{transform}/count', 'GET',
            pathParams, queryParams, headerParams, formParams, postBody,
            authNames, contentTypes, accepts, returnType, callback
        );
    }

    /**
     * Callback function to receive the result of the apiDatabasesdatabaseNameCollectionscollectionNameChainTransformDataGet operation.
     * @callback module:api/CollectionsApi~apiDatabasesdatabaseNameCollectionscollectionNameChainTransformDataGetCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/Object>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get results from an specified transform
     * Get results from an specified transform
     * @param {Object} opts Optional parameters
     * @param {module:api/CollectionsApi~apiDatabasesdatabaseNameCollectionscollectionNameChainTransformDataGetCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/Object>}
     */
    getDataFromTransform(databaseName, collectionName,transform, callback) {
        let postBody = null;

        let pathParams = {
            databaseName, collectionName,
            transform
        };
        let queryParams = {
        };
        let headerParams = {};
        let formParams = {};

        let authNames = [];
        let contentTypes = [];
        let accepts = ['application/json'];
        let returnType = [Object];

        return ApiClient.instance.callApi(
            '/api/databases/{databaseName}/collections/{collectionName}/chain/{transform}/data', 'GET',
            pathParams, queryParams, headerParams, formParams, postBody,
            authNames, contentTypes, accepts, returnType, callback
        );
    }

    /**
     * Callback function to receive the result of the apiDatabasesdatabaseNameCollectionscollectionNameChainTransformDelete operation.
     * @callback module:api/CollectionsApi~apiDatabasesdatabaseNameCollectionscollectionNameChainTransformDeleteCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/Object>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Remove from an specified transform
     * Remove from an specified transform
     * @param {Object} opts Optional parameters
     * @param {module:api/CollectionsApi~apiDatabasesdatabaseNameCollectionscollectionNameChainTransformDeleteCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/Object>}
     */
    removeFromTrnasform(databaseName, collectionName,transform,   callback) {
        let postBody = null;

        let pathParams = {
            databaseName, collectionName,transform
        };
        let queryParams = {

        };
        let headerParams = {};
        let formParams = {};

        let authNames = [];
        let contentTypes = [];
        let accepts = ['application/json'];
        let returnType = [Object];

        return ApiClient.instance.callApi(
            '/api/databases/{databaseName}/collections/{collectionName}/chain/{transform}', 'DELETE',
            pathParams, queryParams, headerParams, formParams, postBody,
            authNames, contentTypes, accepts, returnType, callback
        );
    }

    /**
     * Callback function to receive the result of the apiDatabasesdatabaseNameCollectionscollectionNameFindDelete operation.
     * @callback module:api/CollectionsApi~apiDatabasesdatabaseNameCollectionscollectionNameFindDeleteCallback
     * @param {String} error Error message, if any.
     * @param {'Boolean'} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Find and remove
     * Find and remove from  query
     * @param {Object} opts Optional parameters
     * @param {module:api/CollectionsApi~apiDatabasesdatabaseNameCollectionscollectionNameFindDeleteCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link 'Boolean'}
     */
    findAndRemove(databaseName, collectionName, body, callback) {
        let postBody = body;

        let pathParams = {};
        let queryParams = {
            'collectionName': opts['collectionName'],

        };
        let headerParams = {};
        let formParams = {};

        let authNames = [];
        let contentTypes = ['application/json'];
        let accepts = ['application/json'];
        let returnType = 'Boolean';

        return ApiClient.instance.callApi(
            '/api/databases/{databaseName}/collections/{collectionName}/find', 'DELETE',
            pathParams, queryParams, headerParams, formParams, postBody,
            authNames, contentTypes, accepts, returnType, callback
        );
    }

    /**
     * Callback function to receive the result of the apiDatabasesdatabaseNameCollectionscollectionNameFindFirstPost operation.
     * @callback module:api/CollectionsApi~apiDatabasesdatabaseNameCollectionscollectionNameFindFirstPostCallback
     * @param {String} error Error message, if any.
     * @param {module:model/Object} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Find first
     * Find first object from  query
     * @param {Object} opts Optional parameters
     * @param {module:api/CollectionsApi~apiDatabasesdatabaseNameCollectionscollectionNameFindFirstPostCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/Object}
     */
    findFirst(databaseName, collectionName,body, callback) {
        let postBody = body;

        let pathParams = {
            databaseName, collectionName,
        };
        let queryParams = {
        };
        let headerParams = {};
        let formParams = {};

        let authNames = [];
        let contentTypes = ['application/json'];
        let accepts = ['application/json'];
        let returnType = Object;

        return ApiClient.instance.callApi(
            '/api/databases/{databaseName}/collections/{collectionName}/find-first', 'POST',
            pathParams, queryParams, headerParams, formParams, postBody,
            authNames, contentTypes, accepts, returnType, callback
        );
    }

    /**
     * Callback function to receive the result of the apiDatabasesdatabaseNameCollectionscollectionNameFindPost operation.
     * @callback module:api/CollectionsApi~apiDatabasesdatabaseNameCollectionscollectionNameFindPostCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/Object>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Find
     * Find data from  query
     * @param {Object} opts Optional parameters
     * @param {module:api/CollectionsApi~apiDatabasesdatabaseNameCollectionscollectionNameFindPostCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/Object>}
     */
    apiDatabasesdatabaseNameCollectionscollectionNameFindPost(opts, callback) {
        opts = opts || {};
        let postBody = body;

        let pathParams = {};
        let queryParams = {
            'collectionName': opts['collectionName'],

        };
        let headerParams = {};
        let formParams = {};

        let authNames = [];
        let contentTypes = ['application/json'];
        let accepts = ['application/json'];
        let returnType = [Object];

        return ApiClient.instance.callApi(
            '/api/databases/{databaseName}/collections/{collectionName}/find', 'POST',
            pathParams, queryParams, headerParams, formParams, postBody,
            authNames, contentTypes, accepts, returnType, callback
        );
    }

    /**
     * Callback function to receive the result of the apiDatabasesdatabaseNameCollectionscollectionNameFindQueriesObjectPost operation.
     * @callback module:api/CollectionsApi~apiDatabasesdatabaseNameCollectionscollectionNameFindQueriesObjectPostCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/Object>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Find by multiple queries
     * Find by multiple queries (object body) from  query
     * @param {Object} opts Optional parameters
     * @param {module:api/CollectionsApi~apiDatabasesdatabaseNameCollectionscollectionNameFindQueriesObjectPostCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/Object>}
     */
    findQueriesObject(databaseName, collectionName,body, callback) {
        let postBody = body;

        let pathParams = {
            databaseName, collectionName,
        };
        let queryParams = {
        };
        let headerParams = {};
        let formParams = {};

        let authNames = [];
        let contentTypes = ['application/json'];
        let accepts = ['application/json'];
        let returnType = [Object];

        return ApiClient.instance.callApi(
            '/api/databases/{databaseName}/collections/{collectionName}/find-queries-object', 'POST',
            pathParams, queryParams, headerParams, formParams, postBody,
            authNames, contentTypes, accepts, returnType, callback
        );
    }

    /**
     * Callback function to receive the result of the apiDatabasesdatabaseNameCollectionscollectionNameFindQueriesPost operation.
     * @callback module:api/CollectionsApi~apiDatabasesdatabaseNameCollectionscollectionNameFindQueriesPostCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/Object>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Find by multiple queries
     * Find by multiple queries (array body) from  query
     * @param {Object} opts Optional parameters
     * @param {module:api/CollectionsApi~apiDatabasesdatabaseNameCollectionscollectionNameFindQueriesPostCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/Object>}
     */
    findQueries(databaseName, collectionName,body, callback) {
        let postBody = body;

        let pathParams = {
            databaseName, collectionName,
        };
        let queryParams = {
        };
        let headerParams = {};
        let formParams = {};

        let authNames = [];
        let contentTypes = ['application/json'];
        let accepts = ['application/json'];
        let returnType = [Object];

        return ApiClient.instance.callApi(
            '/api/databases/{databaseName}/collections/{collectionName}/find-queries', 'POST',
            pathParams, queryParams, headerParams, formParams, postBody,
            authNames, contentTypes, accepts, returnType, callback
        );
    }

    /**
     * Callback function to receive the result of the apiDatabasesdatabaseNameCollectionscollectionNameIdIndexPost operation.
     * @callback module:api/CollectionsApi~apiDatabasesdatabaseNameCollectionscollectionNameIdIndexPostCallback
     * @param {String} error Error message, if any.
     * @param {Array.<'Number'>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get id index
     * Get id index
     * @param {Object} opts Optional parameters
     * @param {module:api/CollectionsApi~apiDatabasesdatabaseNameCollectionscollectionNameIdIndexPostCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<'Number'>}
     */
    idIndex(databaseName, collectionName, callback) {
        let postBody = null;

        let pathParams = {
            databaseName, collectionName,
        };
        let queryParams = {
        };
        let headerParams = {};
        let formParams = {};

        let authNames = [];
        let contentTypes = [];
        let accepts = ['application/json'];
        let returnType = ['Number'];

        return ApiClient.instance.callApi(
            '/api/databases/{databaseName}/collections/{collectionName}/id-index', 'POST',
            pathParams, queryParams, headerParams, formParams, postBody,
            authNames, contentTypes, accepts, returnType, callback
        );
    }

    /**
     * Callback function to receive the result of the apiDatabasesdatabaseNameCollectionscollectionNameIdIndexPut operation.
     * @callback module:api/CollectionsApi~apiDatabasesdatabaseNameCollectionscollectionNameIdIndexPutCallback
     * @param {String} error Error message, if any.
     * @param {Array.<'Number'>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get id index
     * Get id index
     * @param {Object} opts Optional parameters
     * @param {module:api/CollectionsApi~apiDatabasesdatabaseNameCollectionscollectionNameIdIndexPutCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<'Number'>}
     */
    getIdIndex(databaseName, collectionName, callback) {
        let postBody = null;

        let pathParams = {
            databaseName, collectionName,
        };
        let queryParams = {
        };
        let headerParams = {};
        let formParams = {};

        let authNames = [];
        let contentTypes = [];
        let accepts = ['application/json'];
        let returnType = ['Number'];

        return ApiClient.instance.callApi(
            '/api/databases/{databaseName}/collections/{collectionName}/id-index', 'GET',
            pathParams, queryParams, headerParams, formParams, postBody,
            authNames, contentTypes, accepts, returnType, callback
        );
    }

    /**
     * Callback function to receive the result of the apiDatabasesdatabaseNameCollectionscollectionNameIndexPropertyPost operation.
     * @callback module:api/CollectionsApi~apiDatabasesdatabaseNameCollectionscollectionNameIndexPropertyPostCallback
     * @param {String} error Error message, if any.
     * @param {'Boolean'} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Add or update an index
     * Add or update an index for an specific property
     * @param {Object} opts Optional parameters
     * @param {module:api/CollectionsApi~apiDatabasesdatabaseNameCollectionscollectionNameIndexPropertyPostCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link 'Boolean'}
     */
    addIndex(databaseName, collectionName, property,  callback) {
        let postBody = null;

        let pathParams = {
            databaseName, collectionName,  property
        };
        let queryParams = {
        };
        let headerParams = {};
        let formParams = {};

        let authNames = [];
        let contentTypes = [];
        let accepts = ['application/json'];
        let returnType = 'Boolean';

        return ApiClient.instance.callApi(
            '/api/databases/{databaseName}/collections/{collectionName}/index/{property}', 'POST',
            pathParams, queryParams, headerParams, formParams, postBody,
            authNames, contentTypes, accepts, returnType, callback
        );
    }

    /**
     * Callback function to receive the result of the apiDatabasesdatabaseNameCollectionscollectionNameIndexPropertyPut operation.
     * @callback module:api/CollectionsApi~apiDatabasesdatabaseNameCollectionscollectionNameIndexPropertyPutCallback
     * @param {String} error Error message, if any.
     * @param {'Boolean'} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Add or update an index
     * Add or update an index for an specific property
     * @param {Object} opts Optional parameters
     * @param {module:api/CollectionsApi~apiDatabasesdatabaseNameCollectionscollectionNameIndexPropertyPutCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link 'Boolean'}
     */
    addOrUpdateIndex(databaseName, collectionName, property,  callback) {
        let postBody = null;

        let pathParams = {
            databaseName, collectionName,  property
        };
        let queryParams = {
        };
        let headerParams = {};
        let formParams = {};

        let authNames = [];
        let contentTypes = [];
        let accepts = ['application/json'];
        let returnType = 'Boolean';

        return ApiClient.instance.callApi(
            '/api/databases/{databaseName}/collections/{collectionName}/index/{property}', 'PUT',
            pathParams, queryParams, headerParams, formParams, postBody,
            authNames, contentTypes, accepts, returnType, callback
        );
    }

    /**
     * Callback function to receive the result of the apiDatabasesdatabaseNameCollectionscollectionNameUniqueIndexPropertyPost operation.
     * @callback module:api/CollectionsApi~apiDatabasesdatabaseNameCollectionscollectionNameUniqueIndexPropertyPostCallback
     * @param {String} error Error message, if any.
     * @param {'Boolean'} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Add or update an unique index
     * Add or update an unique index for an specific property
     * @param {Object} opts Optional parameters
     * @param {module:api/CollectionsApi~apiDatabasesdatabaseNameCollectionscollectionNameUniqueIndexPropertyPostCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link 'Boolean'}
     */
    addOrUpdateUniqueIndex(databaseName, collectionName, property,  callback) {
        let postBody = null;

        let pathParams = {
            databaseName, collectionName,  property
        };
        let queryParams = {
        };
        let headerParams = {};
        let formParams = {};

        let authNames = [];
        let contentTypes = [];
        let accepts = ['application/json'];
        let returnType = 'Boolean';

        return ApiClient.instance.callApi(
            '/api/databases/{databaseName}/collections/{collectionName}/unique-index/{property}', 'POST',
            pathParams, queryParams, headerParams, formParams, postBody,
            authNames, contentTypes, accepts, returnType, callback
        );
    }

    /**
     * Callback function to receive the result of the apiDatabasesdatabaseNameCollectionscollectionNameUniqueIndexPropertyPut operation.
     * @callback module:api/CollectionsApi~apiDatabasesdatabaseNameCollectionscollectionNameUniqueIndexPropertyPutCallback
     * @param {String} error Error message, if any.
     * @param {'Boolean'} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Add or update an unique index
     * Add or update an unique index for an specific property
     * @param {Object} opts Optional parameters
     * @param {module:api/CollectionsApi~apiDatabasesdatabaseNameCollectionscollectionNameUniqueIndexPropertyPutCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link 'Boolean'}
     */
    getUniqueIndex(databaseName, collectionName, property, callback) {
        let postBody = null;

        let pathParams = {
            databaseName, collectionName,  property
        };
        let queryParams = {
        };
        let headerParams = {};
        let formParams = {};

        let authNames = [];
        let contentTypes = [];
        let accepts = ['application/json'];
        let returnType = 'Boolean';

        return ApiClient.instance.callApi(
            '/api/databases/{databaseName}/collections/{collectionName}/unique-index/{property}', 'GET',
            pathParams, queryParams, headerParams, formParams, postBody,
            authNames, contentTypes, accepts, returnType, callback
        );
    }

}
